##############################
### 혼자 풀어보는 연습문제 ###
##############################
data(mpg, package = "ggplot2") # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv에 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty에 이상치 할당
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv %in% c(4, 'f', 'r'), NA, mpg$drv)
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
table(mpg$drv)
##############################
### 혼자 풀어보는 연습문제 ###
##############################
data(mpg, package = "ggplot2") # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv에 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty에 이상치 할당
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(mpg$drv %in% c(4, 'f', 'r'), mpg$drv, NA)
table(mpg$drv)
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
##############################
### 혼자 풀어보는 연습문제 ###
##############################
data(mpg, package = "ggplot2") # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv에 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty에 이상치 할당
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(! mpg$drv %in% c(4, 'f', 'r'), NA, mpg$drv)
table(mpg$drv)
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
##############################
### 혼자 풀어보는 연습문제 ###
##############################
data(mpg, package = "ggplot2") # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv에 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty에 이상치 할당
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
table(mpg$drv)
mpg$drv <- ifelse(! mpg$drv %in% c(4, 'f', 'r'), NA, mpg$drv)
table(mpg$drv)
?table
table(mpg$drv, useNA = "ifany")
# Q2) 상자 그림을 이용해서 cty에 이상치가 있는지 확인하세요. 상자 그림의 통계치를
#     이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가
#     사라졌는지 확인하세요
sort(mpg$cty)
result <- boxplot(mpg$cty)$stats
result[1]
result[5]
mpg$cty[mpg$cty > result[5]]
mpg$cty[mpg$cty < result[1]]
mpg$cty <- ifelse(mpg$cty > result[5] | mpg$cty < result[1], NA, mpg$cty)
result <- boxplot(mpg$cty)$stats
table(mpg$cty, useNA = "ifany")
mpg %>% filter(
!is.na(mpg$cty)) %>% summarise(drv_cty = mean(cty))
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
mpg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty))
mpg
##############################
### 혼자 풀어보는 연습문제 ###
##############################
data(mpg, package = "ggplot2") # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv에 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty에 이상치 할당
# Q1) drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가
#     사라졌는지 확인하세요. 결측 처리 할 때는 %in% 기호를 활용하세요.
sort(mpg$drv)
mpg$drv <- ifelse(! mpg$drv %in% c(4, 'f', 'r'), NA, mpg$drv)
table(mpg$drv, useNA = "ifany")
# Q2) 상자 그림을 이용해서 cty에 이상치가 있는지 확인하세요. 상자 그림의 통계치를
#     이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가
#     사라졌는지 확인하세요
sort(mpg$cty)
result <- boxplot(mpg$cty)$stats
mpg$cty[mpg$cty > result[5]]
mpg$cty[mpg$cty < result[1]]
mpg$cty <- ifelse(mpg$cty > result[5] | mpg$cty < result[1], NA, mpg$cty)
table(mpg$cty, useNA = "ifany")
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty))
drv_avg
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty), na.rm = T)
drv_avg
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty))
drv_avg
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty, na.rm = T))
drv_avg
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv, na.rm = T) %>% summarise(drv_cty = mean(cty, na.rm = T))
drv_avg
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty, na.rm = T))
drv_avg
##############################
### 혼자 풀어보는 분석도전 ###
##############################
data(midwest, package = "ggplot2") # midwest 데이터 불러오기
# 문1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다.
#      midwest 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
head(midwest)
midwest <- midwest %>% mutate(popyouth = (poptotal-popadult)/poptotal)
midwest <- midwest %>% mutate(popyouth = (poptotal-popadults)/poptotal)
head(midwest)
midwest <- midwest %>% mutate(midwest$popyouth = (poptotal-popadults)/poptotal)
midwest$popyouth
midwest$popyouth <- midwest %>% mutate(popyouth = ((poptotal-popadults)/poptotal) * 100)
midwest$popyouth <- midwest %>% mutate(popyouth = round((poptotal-popadults)/poptotal) * 100)
head(midwest$popyouth)
# Q3) 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음
#     drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어보세요.
drv_avg <- mpg %>% group_by(drv) %>% summarise(drv_cty = mean(cty, na.rm = T)) %>%
filter(!is.na(drv))
drv_avg
midwest$popyouth <- round((poptotal-popadults)/poptotal) * 100)
midwest$popyouth <- round((poptotal-popadults)/poptotal) * 100))
midwest$popyouth <- (poptotal-popadults) / poptotal * 100
midwest$popyouth <- (midwest$poptotal-midwest$popadults) / midwest$poptotal * 100
head(midwest$popyouth)
head(midwest)
# 문1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다.
#      midwest 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
midwest$popyouth <- (midwest$poptotal-midwest$popadults) / midwest$poptotal * 100
sort(midwest)
table(midwest)
# 문1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다.
#      midwest 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
midwest$popyouth <- (midwest$poptotal-midwest$popadults) / midwest$poptotal * 100
View(midwest)
? orderBy
? order
head(midwest$popyouth, 5)
#########################################
##### 6장. 데이터베이스 및 SQL 이용 #####
#########################################
# 이 장의 내용 : SQL문으로 데이터프레임과 DB(oracle, mySQL) 테이블을 이용
rm(list = ls(all.names = T))
### 1. SQL문으로 데이터 프레임 처리 ###
install.packages('sqldf')
library(sqldf)
sqldf("select * from iris")
## 중복 행 제거(한 행만 출력) ##
sqldf("select distinct species from iris")
## 중복 행 제거(한 행만 출력) ##
sqldf("select distinct Species from iris")
## 행 제한 조건 (setosa종만 출력) ##
sqldf("select * from iris where Species == 'setosa'")
iris[iris$Species == 'setosa', ]
subset(iris, iris$Species == 'setosa') #방법3
iris %>% filter(Species == 'setosa') # 방법4
## 컬럼명에
sqldf("select `Sepal.Length`, Species from iris")
## 컬럼명에
sqldf("select 'Sepal.Length', Species from iris")
## 컬럼명에 다른 기호가 들어가면 ''로 묶은 후 출력 ##
sqldf("select 'Sepal.Length', Species from iris")
## 컬럼명에 다른 기호가 들어가면 ``(숫자 1키 옆에 있음)로 묶은 후 출력 ##
sqldf("select `Sepal.Length`, Species from iris")
? arrange
?? arrange
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest <- midwest %>% arrange(desc(midwest$popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% arrange(desc(midwest$popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwes %>% filter(country) %>% select(midwest$popyouth) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% filter(country) %>% select(midwest$popyouth) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% group_by(country) %>% arrange(desc(popyouth)) %>% head(5)
##############################
### 혼자 풀어보는 분석도전 ###
##############################
data(midwest, package = "ggplot2") # midwest 데이터 불러오기
# 문1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다.
#      midwest 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
midwest$popyouth <- (midwest$poptotal-midwest$popadults) / midwest$poptotal * 100
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% group_by(country) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% group_by(county) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
view(midwest) %>% group_by(county) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% group_by(county) %>% arrange(desc(popyouth)) %>% head(5)
# 문2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구백분율을 출력하세요.
midwest %>% group_by(county) %>% arrange(desc(popyouth)) %>% head(5) %>% select('county', 'popyouth')
str(iris)
str(ex)
## 컬럼명에 다른 기호가 들어가면 ``(숫자 1키 옆에 있음)로 묶은 후 출력 ##
ex <- sqldf("select `Sepal.Length`, Species from iris")
str(ex)
# ex. 종별 Sepal.Length, Sepal.Width의 평균
library(doBy)
summaryBy(Sepal.Length + Sepal.Width ~ Species,
data = iris,
FUN = mean)
sqldf("select Species, avg(`Sepal.Length`), avg(`Sepal.Width`)
from iris
group by Species")
sqldf("select Species, avg(`Sepal.Length`), avg(`Sepal.Width`)
from iris
group by Species
having avg(`Sepal.Length`) > 6")
# ex2. iris를 Sepal.Length 기준으로 내림차순 정렬하여 11~15등을 조회
sqldf("select *
from iris
order by `Sepal.Length` desc
limit 10, 5")
# ex2. iris를 Sepal.Length 기준으로 내림차순 정렬하여 11~15등을 조회
sqldf("select *
from iris
order by `Sepal.Length` desc
limit 10,5")
### 2. 오라클 데이터베이스 연결 ###
# 사전 작업 : 'ojdb6.jar'를 이용하므로 자바 설치 및 환경변수 설정(JAVA_HOME) 필요!
getwd()
#              RJDBC 패키지를 설치 및 로드
install.packages('RJDBC')
library(RJDBC)
#              드라이버 클래스 로드
drv <- JDBC("oracle.jdbc.driver.OracleDriver", classPath = "ojdbc6.jar")
drv
#              데이터 베이스 연결
conn <- dbConnect(drv, "jdbc:oracle:thin:@127.0.0.1:1521:xe", "scott", "tiger")
conn
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select *
from emp")
emp <- fetch(rs, n = 10) # 처음부터 10줄 받아옴, -1을 넣으면 전부 다 받아온다.
class(emp)
head(emp)
# SQL문 전송 + 결과받기 한번에 하는 방법
dept <- dbGetQuery(conn, "select *
from dept")
dept
dept[dept$DEPTNO < 30, ]
# 데이터 연결 해제
dbDisconnect(conn)
dbUnloadDriver(drv)
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
dbSendUpdate(conn, "update dept set
loc = 'PUSAN'
where deptno = 50")
#              데이터 베이스 연결
conn <- dbConnect(drv, "jdbc:oracle:thin:@127.0.0.1:1521:xe", "scott", "tiger")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
#              드라이버 클래스 로드
drv <- JDBC("oracle.jdbc.driver.OracleDriver", classPath = "ojdbc6.jar")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
# 데이터 연결 해제 및 드라이버 언로드
dbDisconnect(conn)
dbUnloadDriver(drv)
#              드라이버 클래스 로드
drv <- JDBC("oracle.jdbc.driver.OracleDriver", classPath = "ojdbc6.jar")
#              데이터 베이스 연결
conn <- dbConnect(drv, "jdbc:oracle:thin:@127.0.0.1:1521:xe", "scott", "tiger")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
dbSendUpdate(conn, "update dept set
loc = 'PUSAN'
where deptno = 50")
dbSendUpdate(conn, "delete from dept
where deptno = 50")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
# 데이터 연결 해제 및 드라이버 언로드
dbDisconnect(conn)
dbUnloadDriver(drv)
detach("package:RJDBC", unload = T)
### 3. MySQL 데이터베이스 연결 ###
# 사전작업 : 외부에서 액세스 허용, MySQL Workbench에서
# alter user 'root'@'localhost' identified with mysql_native_password by 'mysql';
install.packages("RMySQL")
library(RMySQL)
drv <- dbDriver("MySQL")
drv
conn
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
personal <- fetch(rs, n = -1)
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
# 데이터베이스 연결
conn <- dbConnect(drv, host = "127.0.0.1", dbname = "graydb", user = "root", password = "mysql")
conn
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
personal <- fetch(rs, n = -1)
personal
# SQL문 전송 및 결과 한 번에 받기
division <- dbGetQuery(conn, "select * from division")
division
# 테이블 전체 데이터를 한꺼번에 조회
person <- dbReadTable(conn, "personal")
person
# 데이터 베이스 연결 해제
dbDisconnect(conn)
dbUnloadDriver(drv)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 0.4, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest
midwest[, c(11:13)]
midwest[, c(12:15)]
midwest[, c(15:18)]
midwest[, c(18:20)]
midwest[, c(20:22)]
View(midwest)
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 | midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "large", "middle"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
### 1. plyr 패키지 ###
install.packages("plyr")
library(plyr)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "small", "large"), "middle")
midwest[, c(29:30)]
midwest
View(midwest)
apply(iris[, 1:4], 2, FUN = mean)
apply(iris[, 1:4], 2, FUN = function(col){mean(col)})
x <- data.frame(v1 = c(4, 9, 16),
v2 = c(16, 81, 196))
x
apply(x, 2, sum)
apply(x, 2, FUN = function(col){sum(sqrt(col))})
? adply
adply(.data = x, margins = 2, .fun = function(col){sum(sqrt(col))})
adply(.data = x, .margins = 2, .fun = function(col){sum(sqrt(col))})
# 종별 Sepal.Length, Sepal.Width의 평균
library(doBy)
summaryBy(Sepal.Length + Sepal.Width ~ Species, data = iris, FUN = mean)
ddply(.data = iris, .(Species), function(group){
data.frame(SL.mean = mean(group$Sepal.Length),
SW.mean = mean(group$Sepal.Width))
})
### 2. 데이터 구조 변경(metl, cast) ###
head(airquality)
install.packages("reshape2")
library(reshape2)
airquality.melt <- melt(airquality, id = c('Month', 'Day'), value.name = "val")
head(airquality.melt)
# melt를 통해 바뀐 구조 확인 (5월 5일 데이터)
subset(airquality, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 1)
subset(airquality.melt, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 5)
airquality.melt <- melt(airquality, id = c('Month', 'Day'), na.rm = T)
subset(airquality.melt, Month == 5 & Day == 5)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
View(midwest)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "large", "small"), "middle")
View(midwest)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "small", "large"), "middle")
View(midwest)
table(midwest$group)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, "large", ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "small"))
table(midwest$group)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, "large", ifelse(midwest$popyouth > 30 | midwest < 40, "middle", "small"))
table(midwest$group)
# 문4. popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율'
#      변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest$totalasian <- (midwest$popasian / midwest$poptotal) * 100
tail(midwest = c('state', 'county'), 10)
tail(midwest, 10)
midwest <- midwest %>% arrange(desc(c('state', 'county'))) %>% tail(10)
midwest <- midwest %>% arrange(desc(c('state', 'county'))) %>% midwest[-10]
midwest %>% select('county', 'state') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
# melt된 데이터를 원상 복구 - dcast vs acast
airquality.dc <- dcast(airquality.melt, Month + Day ~ Variable)
# melt된 데이터를 원상 복구 - dcast vs acast
airquality.dc <- dcast(airquality.melt, Month + Day ~ variable)
head(airquality.dc)
airquality.ac <- acast(airquality.melt, Month + Day ~ variable)
head(airquality.ac)
airquality.dc[airquality.dc$Month == 5 & airquality.dc$Day == 1]
airquality.dc[airquality.dc$Month == 5 & airquality.dc$Day == 1, ]
airquality.ac['5_1', ]
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("\\192.168.1.165\\Download\\sharedBigdata/전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("\\192.168.1.165\\Download\\sharedBigdata\\전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("/192.168.1.165/Download/sharedBigdata//전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("C:/192.168.1.165/Download/sharedBigdata/전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
head(df1)
df2 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\주택도시보증공사_전국 신규 민간아파트 분양가격 동향_20210531.csv")
head(df2)
df2 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\주택도시보증공사_전국 신규 민간아파트 분양가격 동향_20210531.csv", header = T)
head(df2)
dim(df1)
str(df1)
summary(df1)
dim(df1)
table(is.na(df1))
df1.melt <- melt(df1, id = c('지역'), value.name = 'price')
head(df1.melt)
class(df1.melt$variable)
is.character(df1.melt$variable)
df1.melt$variable <- as.character(df1.melt$variable)
class(df1.melt$variable)
substr(variable, 2, 5)
# variable에서 년도 뽑기
variable = 'X2013년12월'
substr(variable, 2, 5)
df1.melt$연도 <- as.integer(substr(df1.melt$variable, 2, 5))
# variable에서 월 뽑기
strsplit(variable, '년')
# variable에서 월 뽑기
monthStr <- strsplit(variable, '년')[[1]][2]
monthStr <- substr(monthStr, 1, nchar(monthStr)-1)
as.integer(monthStr)
getMonth <- function(variable){
monthStr <- strsplit(variable, '년')[[1]][2]
monthStr <- substr(monthStr, 1, nchar(monthStr)-1)
return(as.integer(monthStr))
}
getMonth('X2013년12월')
sapply(df1.melt$variable, getMonth)
df1.melt$월 <- sapply(df1.melt$variable, getMonth)
head(df1.melt$월)
df1.melt$variable <- NULL
head(df1.melt)
dim(df2)
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
head(df2)
df2 <- df2[규모구분 == '모든면적', ]
df2 <- df2[df2$규모구분 == '모든면적', ]
df2
df2$규모구분 <- NULL
df2
df2$분양가격... <- as.integer(df2$분양가격...)
head(df2)
colnames(df2) <- c('지역', '연도', '월', 'price_per_m')
head(df2)
df2[df2$price_per_m == '', ]
sum(is.na(df2))
colSums(is.na(df2))
df2$price_per_m <- as.integer(df2$price_per_m)
sum(is.na(df2))
df2$price <- df2$price_per_m * 3.3
head(df1.melt, 2)
head(df2[, c('지역', '연도', '월', 'price')], 2)
df <- rbind(df1.melt, df2[, c('지역', '연도', '월', 'price')])
edit(df)
dim(df)
