geom_point(col = 'orange')
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'orange', pch = 2)
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'orange', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'skyblue', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'violet', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) + # 그래프 초기화
geom_point(col = 'violet', pch = 2) + # mpg, wt에 대해 데이터 표기
labs(title = "첫 산점도 예제") + # 제목
geom_smooth()
ggplot(data = mtcars, aes(x = wt, y = mpg)) + # 그래프 초기화
geom_point(col = 'violet', pch = 2) + # mpg, wt에 대해 데이터 표기
labs(title = "첫 산점도 예제") + # 제목
geom_smooth(method = "lm")
ggplot(data = iris, aes(x = Species, y = Sepal.Length))
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot(fill = 'red')
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par()
? par
plot(cars)
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par() - 그래프 환경을 조정
? par
oldPar <- par(bty = 'c')
oldPar
oldPar <- par(bty = ']')
plot(cars)
plot(iris)
par(oldPar)
plot(cars)
plot(iris)
oldPar <- par(bty = 'L') # 파라미터 지정 전 객체를 저장
plot(cars)
plot(cars)
oldPar <- par(bty = 'L') # 파라미터 지정 전 객체를 저장
plot(cars)
plot(iris)
par(oldPar) # oldPar 설정으로 복귀된다.
plot(cars, xlab = "x label", ylab = "y label", main = "제목")
fit <- lm(dis ~ speed, data = cars)
fit <- lm(dist ~ speed, data = cars)
ablines(fit, col = 'red', lwd = 4)
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par() - 그래프 환경을 조정
library(ggplot2)
ablines(fit, col = 'red', lwd = 4)
abline(fit, col = 'red', lwd = 4)
abline(fit, col = 'red', lwd = 2)
fit <- lm(dist ~ speed, data = cars)
abline(fit, col = 'red', lwd = 2)
plot(cars, xlab = "x label", ylab = "y label", main = "제목") # 그래프 축 이름 및 제목 변경
fit <- lm(dist ~ speed, data = cars)
abline(fit, col = 'red', lwd = 2, lty = 'dashed')
colors()
# (1-1) par()함수의 다른 파라미터 사용 예
x <- 1:100
y1 <- rnorm(100) # 평균이 0이고 표준편차가 1인 수 100개 추출
y2 <- rnorm(100) + 100 # 평균이 100이고 표준편차가 1인 수 100개 추출
oldPar <- par(mar = c(5, 5, 5, 5)) # mar : 그래프 여백(하, 좌, 상, 우)
? plot
? points
plot(x, y1, pch = 10, type = "b") # pch : 찍히는 점의 스타일, type :
plot(x, y1, pch = 10, type = "b", bg = 'red') # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red') # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2)) # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", bty = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", btx = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", bty = "n", ylab = "") # pch : 찍히는 점의 스타일
# bg : 21~25번의 pch에만 해당
# ylim : y축의 범위 설정
# yaxt : y축의 수치 표시를 없앰.
axis(side = 2, at = (c(-2, 0, 2))) # side : 1하, 2좌, 3상, 4우
# bg : 21~25번의 pch에만 해당
# ylim : y축의 범위 설정
# yaxt : y축의 수치 표시를 없앰.
axis(side = 2, at = c(-2, 0, 2), col = 'red') # side : 1하, 2좌, 3상, 4우
# 저수준 그래프, at축이 그려질 위치
mtext("red line(y1)", side = 2, line = 2, at = 0, col = 2)
par(new = TRUE) # 기존 그래프를 지우지 않고 덧그림
plot(x, y2, pch = 20, type = "b", col = 'blue', yaxt = "n",
ylim = c(98, 108), ylab = "", bty = "n")
axis(side = 2, at = c(-8:-4), col = 'blue')
axis(side = 4, at = c(98, 100, 102), col = 'blue')
mtext("blue line(y2)", side = 4, line = 2, at = 100, col = 'blue')
par(oldPar)
## 2. 그래프 함수(고수준)
# 2.1 plot - type에 따라 여러 유형의 그래프를 그린다. default는 산점도 유형
# 3행 2열로 그래프영역을 분리하고 type 속성에 따른 그래프 출력
? par
oldPar <- par(mfrow = c(3,2))
plot(cars, type = "p", main = "p type")
plot(cars, type = "l", main = "l type")
plot(cars, type = "b", main = "b type")
plot(cars, type = "o", main = "o type") # 선과 점
plot(cars, type = "s", main = "s type") # 계단 형태
plot(cars, type = "n", main = "n type") # 안보임
par(oldPar)
plot(cars)
plot(cars, main = "speed and stopping distance of cars")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylabel = "stopping distance(ft)")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylab = "stopping distance(ft)")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylab = "stopping distance(ft)", las = 1)
oldPar <- par(mfrow = c(2,3))
plot(cars, type = "p", main = "p type") # 일반적 산점도
plot(cars, type = "l", main = "l type") # 추세선
plot(cars, type = "b", main = "b type") # 선과 점
plot(cars, type = "s", main = "s type") # 계단 형태
plot(cars, type = "n", main = "n type") # 안보임
plot(cars, type = "o", main = "o type") # 선과 점
par(oldPar)
# 2.2 barplot - 막대그래프
datasets::VADeaths
class(VADeaths)
rownames(VADeaths)
colnames(VADeaths)
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths))  # 4는 (bold + italic)
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths),  # 4는 (bold + italic)
destiny = 50)
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths),  # 4는 (bold + italic)
density = 50)
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths),  # 4는 (bold + italic)
density = 50, angle = c(10, 30, 50, 70, 120))
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths),  # 4는 (bold + italic)
density = 50, angle = c(10, 30, 50, 70, 120),
col = "yellow") # legend : 오른쪽 상단 범례
barplot(VADeaths, main = "버지니아 사망률", font = 2, # font : 1이 default, 2는 bold, 3은 italic,
border = "red", legend = rownames(VADeaths),  # 4는 (bold + italic)
density = 50, angle = c(10, 30, 50, 70, 120), # legend : 오른쪽 상단 범례
col = c("brown", "azure", "pink", "skyblue", "coral"))
barplot(VADeaths, main = "버지니아 사망률", font = 2, border = "orange",
legend = rownames(VADeaths), density = 60, angle = c(10,30,50,70,110),
beside = T)
barplot(VADeaths, main = "버지니아 사망률", font = 2, border = "orange",
legend = rownames(VADeaths), density = 60, angle = c(10,30,50,70,110),
beside = T, col = rainbow(5))                   # beside : 막대선을 분리
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
pal <- brewer.pal(5, "Accent")
barplot(VADeaths, main = "버지니아 사망률", font = 2, border = "orange",
legend = rownames(VADeaths), density = 60, angle = c(10,30,50,70,110),
beside = T, col = pal)
# 2.3 boxplot - 상자그림(상자도표, 사분위수, 그래프)
datasets::InsectSprays
class(InsectSprays)
names(InsectSprays) <- c('cnt', 'spray')
InsectSprays
boxplot(InsectSprays$cnt)
rm(InsectSprays)
head(InsectSprays)
boxplot(count ~ spray, data = InsectSprays)
boxplot(count ~ spray, data = InsectSprays, col = pal)
tapply(InsectSprays$count, InsectSprays$spray, median)
by(InsectSprays$count, InsectSprays$spray, median)
by(InsectSprays$count, InsectSprays$spray, summary)
tapply(InsectSprays$count, InsectSprays$spray, summary)
library(doBy)
summaryBy(count ~ spray, data = InsectSprays, FUN = summary)
hist(x)
# 2.4 hist - 히스토그램(도수분포표 - 연속된 데이터의 도수분포)
x <-c(1,1,2,2,2,3,4,4)
hist(x)
hist(x, breaks = c(0.5, 1.5, 2.5, 3.5, 4.5)) # breaks : 구간을 임의로 지정 가능
hist(x, breaks = c(1, 2, 3, 4, 5, 6))
hist(x, breaks = c(0.5, 1.5, 2.5, 3.5, 4.5)) # breaks : 구간을 임의로 지정 가능
h <- hist(x, breaks = c(0.5, 1.5, 2.5, 3.5, 4.5))
h
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = pal)
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "blue")
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "blue", adj = c(0,0))
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "red")
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "orange", adj = c(0,1))
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "green", adj = c(1,0)) # 텍스트의 오른쪽 아래가 기준점
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "purple", adj = c(1,1)) # 텍스트의 오른쪽 아래가 기준점
h <- hist(x, breaks = c(0.5, 1.5, 2.5, 3.5, 4.5), ylim = c(0, 3.5))
h
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "blue", adj = c(0,0)) # 텍스트의 왼쪽 아래가 기준점
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "orange", adj = c(0,1)) # 텍스트의 왼쪽 위가 기준점
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "green", adj = c(1,0)) # 텍스트의 오른쪽 아래가 기준점
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "purple", adj = c(1,1)) # 텍스트의 오른쪽 위가 기준점
text(h$mids, h$counts, paste(h$counts, '개', sep = ''), col = "red", adj = c(0.5, -0.5))
# ex2.
datasets::islands
class(islands)
head(islands)
islands
is.vector(islands)
hist(islands)
hist(sqrt(islands), breaks = c(2, 30, 70, 100, 140))
rnorm(10) # 평균이 0, 표준편차가 1인 데이터 10개 픽
set.seed(14)
rnorm(10) # 평균이 0, 표준편차가 1인 데이터 10개 픽
rnorm(10) # 평균이 0, 표준편차가 1인 데이터 10개 픽
set.seed(14)
rnorm(10) # 평균이 0, 표준편차가 1인 데이터 10개 픽
x <- rnorm(1000) # 평균이 0, 표준편차가 1인 데이터 1000개 픽
set.seed(14)
x <- rnorm(1000) # 평균이 0, 표준편차가 1인 데이터 1000개 픽
hist(x)
# 2.5 pie - 파이 그래프
pie.lang <- c(0.1, 0.3, 0.2, 0.15, 0.1, 0.15)
sum(pie.lang)
names(pie.lang) <- c('c', 'java', 'python', 'R', 'oracle', 'Hadoop')
# 2.5 pie - 파이 그래프
x <- c(20, 30, 30, 20, 15, 5)
pie.lang <- x/sum(x)*100
pie.lang
sum(pie.lang)
pie.lang <- c(0.1, 0.3, 0.2, 0.15, 0.1, 0.15)
sum(pie.lang)
pie.lang <- x/sum(x)
sum(pie.lang)
pie(pie.lang) # 반시계 방향
names(pie.lang) <- c('c', 'java', 'python', 'R', 'oracle', 'Hadoop')
pie(pie.lang) # 반시계 방향
pie(pie.lang, col = pal) # 반시계 방향
pie(pie.lang, clockwise = T, col = rainbow(6))
pie(pie.lang, clockwise = T, col = brewer.pal(6, "Set3"))
# 2.6 mosaicplot - 모자이크 플롯
# ex1.
datasets::Titanic
dim(Titanic)
mosaicplot(~ Sex + Age + Survied, data = Titanic)
mosaicplot(~Sex+Age+Survied, data = Titanic, color = T)
class(Titanic)
mosaicplot(~Sex+Age+Survied, data = Titanic, color = T)
mosaicplot(~Sex+Age+Survived, data = Titanic, color = T)
mosaicplot(~ Sex+Age+Survived, data = Titanic, color = T)
mosaicplot(~ Class+Sex+Age+Survived, data = Titanic, color = T)
## 3. 그래프 함수(저수준)
# 3.1 points
# ex1.
plot(-4:4, -4:4, type = "p")
points(rnorm(100), rnorm(100), pch = 8)
points(rnorm(100), rnorm(100), pch = 8, col = 'brown')
points(rnorm(100), rnorm(100), pch = 8, col = 'brown')
# 3.2 lines
# ex1.
head(cars, 3)
# 3.2 lines
# ex1.
head(cars)
plot(cars$speed, cars$dist)
fit <- lm(dist ~ speed, data = cars)
fit
lines(cars$speed, cars$speed * 3.932 - 17.579, col = 'blue', lty = 'dashed',
lwd = 2)
# 3.3 abline - 회귀식 선
# ex1.
abline(fit, col = 'red', lwd = 4, lty = 'dotted')
# 3.4 text(x, y, 출력할 텍스트, 그 외 옵션들)
plot(-1:1, -1:1, type = "n", xlab = "X")
# 3.4 text(x, y, 출력할 텍스트, 그 외 옵션들)
plot(-1:1, -1:1, type = "n", xlab = "X", ylab = "Y")
points(0, 0, pch = 3, cex = 4, lwd = 3)
# 3.4 text(x, y, 출력할 텍스트, 그 외 옵션들)
plot(-1:1, -1:1, type = "n", xlab = "X", ylab = "Y", las = 1)
points(0, 0, pch = 3, cex = 4, lwd = 3)
text(0,0 "hello")
text(0, 0, "hello")
text(3, 3, "hello")
text(3, 3, "hello")
text(0, 0, "red", col = "red")
text(0, 0, "red", col = "red", font = 2, cex = 2)
text(0, 0, "red", col = "red", font = 2, cex = 2, adj = c(0, 0)) # cex : 글씨 크기
text(0, 0, "hello")
text(0, 0, "red", col = "red", font = 2, cex = 2, adj = c(0, 0)) # cex : 글씨 크기
text(0, 0, "blue", col = "red", font = 2, cex = 3, adj = c(1, 0))
text(0, 0, "blue", col = "blue", font = 2, cex = 3, adj = c(1, 0))
text(0, 0, "hello")
points(0, 0, pch = 3, cex = 4, lwd = 3)
text(0, 0, "red", col = "red", font = 2, cex = 2, adj = c(0, 0)) # cex : 글씨 크기
text(0, 0, "blue", col = "blue", font = 2, cex = 3, adj = c(1, 0))
text(0, 0, "coral", col = "coral", font = 2, cex = 4, adj = c(1, 1))
text(0, 0, "green", col = "green", font = 2, cex = 4, adj = c(0, 1))
# 3.4 text(x, y, 출력할 텍스트, 그 외 옵션들)
plot(-1:1, -1:1, type = "n", xlab = "X", ylab = "Y", las = 1)
points(0, 0, pch = 3, cex = 4, lwd = 3)
text(0, 0, "hello")
text(0, 0, "red", col = "red", font = 2, cex = 2, adj = c(0, 0)) # cex : 글씨 크기
text(0, 0, "blue", col = "blue", font = 2, cex = 3, adj = c(1, 0))
text(0, 0, "coral", col = "coral", font = 2, cex = 4, adj = c(1, 1))
text(0, 0, "green", col = "green", font = 2, cex = 4, adj = c(0, 1))
# ex2.
plot(1:5, 1:5, type = "n")
# ex2.
plot(1:5, 1:5, type = "n", las = 1)
text(3, 3, 'A', adj = c(0,0), col = 'red')
text(1.5, 4, expression(hat(beta) == (X^t)) ,adj = c(0,0))
text(1.5, 4, expression(hat(beta) == (X^t)*X) ,adj = c(0,0))
text(1.5, 4, expression(hat(beta) == (X^t)*X ^ {-1} * X^t*y) ,adj = c(0,0))
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(car)
# 연습문1. car::salaries에서 교수의 직급(rank)별 연봉(salary)의 상자도표
install.packages('car')
library(car)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow'))
library(ggplot2)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow'))
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = T))
library(car)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = T))
? detach
detach(package:car)
library(car)
library(ggplot2)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = T)) # notch : 중위수에 대해 95% 신뢰구간을 표현
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = TRUE)) # notch : 중위수에 대해 95% 신뢰구간을 표현
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = TRUE)) + # notch : 중위수에 대해 95% 신뢰구간을 표현
geom_point()
# 연습문1. car::salaries에서 교수의 직급(rank)별 연봉(salary)의 상자도표
install.packages('car')
install.packages("car")
library(car)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = TRUE)) + # notch : 중위수에 대해 95% 신뢰구간을 표현
geom_point(position = 'jitter', alpha = 0.3, color = 'brown', pch = 20) +
geom_rug(sides = 'l', col = 'dimgray') # rug : 관측 값의 밀도 상태를 축에 표현
library(car)
dim(Salaries)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = TRUE))
library(ggplot2)
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow', notch = TRUE)) + # notch : 중위수에 대해 95% 신뢰구간을 표현
geom_point(position = 'jitter', alpha = 0.3, color = 'brown', pch = 20) +
geom_rug(sides = 'l', col = 'dimgray') # rug : 관측 값의 밀도 상태를 축에 표현
?geom_boxplot
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(aes(fill = 'lightyellow'),notch = TRUE) + # notch : 중위수에 대해 95% 신뢰구간을 표현
geom_point(position = 'jitter', alpha = 0.3, color = 'brown', pch = 20) +
geom_rug(sides = 'l', col = 'dimgray') # rug : 관측 값의 밀도 상태를 축에 표현
ggplot(Salaries, aes(x = rank, y = salary, col = rank)) +
geom_boxplot(fill = 'lightyellow',notch = TRUE) + # notch : 중위수에 대해 95% 신뢰구간을 표현
geom_point(position = 'jitter', alpha = 0.3, color = 'brown', pch = 20) +
geom_rug(sides = 'l', col = 'dimgray') # rug : 관측 값의 밀도 상태를 축에 표현
# 연습문1.
datasets::mtcars
dim(mtcars)
ggplot(mtcars, aes(x = cyl, y = mpg))
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(fill = 'skyblue')
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(fill = cyl)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(notch = T)
mtcars$cyl <- factor(mtcars$cyl, levels = c(4, 6, 8),
labels = c('4 cylinders', '6 cylinders', '8 cylinders'))
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_boxplot(notch = T)
ggplot(mtcars, aes(x = cyl, y = mpg, col = cyl)) +
geom_boxplot(notch = T)
ggplot(mtcars, aes(x = cyl, y = mpg, fill = cyl)) +
geom_boxplot(notch = T)
# 4.4 바이올린 도표
# boxplot과 밀도 도표를 합쳐 놓은 방식
lattice::singer
head(singer)
library(singer)
singer <- lattice::singer
ggplot(singer, aes(x = voice.part, y = height))
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin()
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin(fill = "honeydew2")
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin(fill = "honeydew2") +
geom_boxplot(width = 0.3, fill = "green")
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin(fill = "honeydew2") +
geom_boxplot(width = 0.3, fill = "green") +
geom_point()
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin(fill = "honeydew2") +
geom_boxplot(width = 0.3, fill = "green") +
geom_point(position = 'jitter')
ggplot(singer, aes(x = voice.part, y = height)) +
geom_violin(fill = "honeydew2") +
geom_boxplot(width = 0.3, fill = "green") +
geom_point(position = 'jitter', alpha = 0.5, col = "orange")
# 4.5 밀도 도표
rm(mtcars)
str(mtcars)
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
ggplot(mtcars, aes(x = mpg)) +
geom_histogram()
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
ggplot(mtcars, aes(x = mpg, fill = cyl)) +
geom_density()
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
ggplot(mtcars, aes(x = mpg)) +
geom_density(aes(fill = cyl))
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
ggplot(mtcars, aes(x = mpg)) +
geom_density(fill = cyl)
str(mtcars)
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
mtcars$cyl = as.factor(mtcars$cyl)
ggplot(mtcars, aes(x = mpg)) +
geom_density(fill = cyl)
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
mtcars$cyl = factor(mtcars$cyl)
# 실린더(cyl)수에 따른 연비를 밀도 도표로 나타내보기
mtcars$cyl = factor(mtcars$cyl, levels = c(4, 6, 8), labels = c('4 cyl', '6 cyl', '8 cyl'))
ggplot(mtcars, aes(x = mpg)) +
geom_density(fill = cyl)
names(mtcars)
ggplot(mtcars, aes(x = mpg)) +
geom_density(aes(fill = cyl))
ggplot(mtcars, aes(x = mpg)) +
geom_density(aes(fill = cyl)) +
theme(legend.position = c(0.7, 0.8))
ggplot(mtcars, aes(x = mpg)) +
geom_density(aes(fill = cyl)) +
theme(legend.position = c(0.8, 0.8))
ggplot(mtcars, aes(x = mpg)) +
geom_density(aes(fill = cyl)) +
theme(legend.position = c(0.9, 0.8))
# 4.6 추세선 (시계열에서 데이터의 흐름을 표현)
dim(economics)
head(economics)
# 시간(date)에 따른 실업률(unemploy)의 추세선
ggplot(economics, aes(x = date, y = unemploy))
# 시간(date)에 따른 실업률(unemploy)의 추세선
ggplot(economics, aes(x = date, y = unemploy)) +
geom_line()
# 시간(date)에 따른 실업률(unemploy)의 추세선
ggplot(economics, aes(x = date, y = unemploy)) +
geom_line() +
geom_smooth()
# 시간(date)에 따른 실업률(unemploy)의 추세선
ggplot(economics, aes(x = date, y = unemploy)) +
geom_line() +
geom_smooth(method = "lm")
# 4.8 그래프를 파일로 저장
# (1) basic graph, ggplot 패키지(모두 저장가능)
jpeg("iris.jpg", width = 400, height = 400)
boxplot(iris$Sepal.Length)
dev.off()
getwd()
png("outData/iris.png", width = 300, height = 300)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width))
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
facet_wrap(~ Species)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
facet_wrap(~ Species)
png("outData/iris.png", width = 300, height = 150)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point() +
facet_wrap(~ Species)
dev.off()
# (2) ggplot2 패키지 - 그래프 함수에서만 저장할 수 있는 방법
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point()
# (2) ggplot2 패키지 - 그래프 함수에서만 저장할 수 있는 방법
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(aes(size = Petal.Width), pch = 2, alpha = 0.5)
ggsave('outData/iris.jpg')
# 4.9 그래프를 파일로 저장
install.packages("gridExtra")
library(gridExtra)
g1 <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width))
g1 <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point()
g1
g2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
g2
grid.arrange(g1, g2, ncol = 2, nrow = 1)
## 5. 산점도 행렬 ##
plot(iris[-5])
pairs(iris[-5])
pairs(iris[-5], panel = panel.smooth())
pairs(iris[-5], panel = panel.smooth)
