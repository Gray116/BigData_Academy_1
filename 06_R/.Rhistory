#              데이터 베이스 연결
conn <- dbConnect(drv, "jdbc:oracle:thin:@127.0.0.1:1521:xe", "scott", "tiger")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
dbSendUpdate(conn, "update dept set
loc = 'PUSAN'
where deptno = 50")
dbSendUpdate(conn, "delete from dept
where deptno = 50")
# DB 데이터 수정
dbSendUpdate(conn, "insert into dept
values(50, 'IT', 'SEOUL')")
# 데이터 연결 해제 및 드라이버 언로드
dbDisconnect(conn)
dbUnloadDriver(drv)
detach("package:RJDBC", unload = T)
### 3. MySQL 데이터베이스 연결 ###
# 사전작업 : 외부에서 액세스 허용, MySQL Workbench에서
# alter user 'root'@'localhost' identified with mysql_native_password by 'mysql';
install.packages("RMySQL")
library(RMySQL)
drv <- dbDriver("MySQL")
drv
conn
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
personal <- fetch(rs, n = -1)
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
# 데이터베이스 연결
conn <- dbConnect(drv, host = "127.0.0.1", dbname = "graydb", user = "root", password = "mysql")
conn
# SQL문 전송 및 결과 받기
rs <- dbSendQuery(conn, "select * from personal")
personal <- fetch(rs, n = -1)
personal
# SQL문 전송 및 결과 한 번에 받기
division <- dbGetQuery(conn, "select * from division")
division
# 테이블 전체 데이터를 한꺼번에 조회
person <- dbReadTable(conn, "personal")
person
# 데이터 베이스 연결 해제
dbDisconnect(conn)
dbUnloadDriver(drv)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 0.4, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest
midwest[, c(11:13)]
midwest[, c(12:15)]
midwest[, c(15:18)]
midwest[, c(18:20)]
midwest[, c(20:22)]
View(midwest)
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 | midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "large", "middle"), "small")
midwest[, c(29:30)]
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
midwest[, c(29:30)]
### 1. plyr 패키지 ###
install.packages("plyr")
library(plyr)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "small", "large"), "middle")
midwest[, c(29:30)]
midwest
View(midwest)
apply(iris[, 1:4], 2, FUN = mean)
apply(iris[, 1:4], 2, FUN = function(col){mean(col)})
x <- data.frame(v1 = c(4, 9, 16),
v2 = c(16, 81, 196))
x
apply(x, 2, sum)
apply(x, 2, FUN = function(col){sum(sqrt(col))})
? adply
adply(.data = x, margins = 2, .fun = function(col){sum(sqrt(col))})
adply(.data = x, .margins = 2, .fun = function(col){sum(sqrt(col))})
# 종별 Sepal.Length, Sepal.Width의 평균
library(doBy)
summaryBy(Sepal.Length + Sepal.Width ~ Species, data = iris, FUN = mean)
ddply(.data = iris, .(Species), function(group){
data.frame(SL.mean = mean(group$Sepal.Length),
SW.mean = mean(group$Sepal.Width))
})
### 2. 데이터 구조 변경(metl, cast) ###
head(airquality)
install.packages("reshape2")
library(reshape2)
airquality.melt <- melt(airquality, id = c('Month', 'Day'), value.name = "val")
head(airquality.melt)
# melt를 통해 바뀐 구조 확인 (5월 5일 데이터)
subset(airquality, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 1)
subset(airquality.melt, Month == 5 & Day == 5)
subset(airquality.melt, Month == 5 & Day == 5)
airquality.melt <- melt(airquality, id = c('Month', 'Day'), na.rm = T)
subset(airquality.melt, Month == 5 & Day == 5)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "large"), "small")
View(midwest)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "large", "small"), "middle")
View(midwest)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, ifelse(midwest$popyouth > 30 & midwest < 40, "small", "large"), "middle")
View(midwest)
table(midwest$group)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, "large", ifelse(midwest$popyouth > 30 & midwest < 40, "middle", "small"))
table(midwest$group)
# 문3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요.
midwest$group <- ifelse(midwest$popyouth >= 40, "large", ifelse(midwest$popyouth > 30 | midwest < 40, "middle", "small"))
table(midwest$group)
# 문4. popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율'
#      변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력하세요.
midwest$totalasian <- (midwest$popasian / midwest$poptotal) * 100
tail(midwest = c('state', 'county'), 10)
tail(midwest, 10)
midwest <- midwest %>% arrange(desc(c('state', 'county'))) %>% tail(10)
midwest <- midwest %>% arrange(desc(c('state', 'county'))) %>% midwest[-10]
midwest %>% select('county', 'state') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
# melt된 데이터를 원상 복구 - dcast vs acast
airquality.dc <- dcast(airquality.melt, Month + Day ~ Variable)
# melt된 데이터를 원상 복구 - dcast vs acast
airquality.dc <- dcast(airquality.melt, Month + Day ~ variable)
head(airquality.dc)
airquality.ac <- acast(airquality.melt, Month + Day ~ variable)
head(airquality.ac)
airquality.dc[airquality.dc$Month == 5 & airquality.dc$Day == 1]
airquality.dc[airquality.dc$Month == 5 & airquality.dc$Day == 1, ]
airquality.ac['5_1', ]
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("\\192.168.1.165\\Download\\sharedBigdata/전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("\\192.168.1.165\\Download\\sharedBigdata\\전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("/192.168.1.165/Download/sharedBigdata//전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("C:/192.168.1.165/Download/sharedBigdata/전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
## 데이터 구조 변경 연습문제 ##
df1 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\전국 평균 평당 분양가격(2013년 9월부터 2015년 8월까지).csv",
header = T)
head(df1)
df2 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\주택도시보증공사_전국 신규 민간아파트 분양가격 동향_20210531.csv")
head(df2)
df2 <- read.csv("D:\\Gray_Bigdata\\Downloads\\14_sharedBigdata\\주택도시보증공사_전국 신규 민간아파트 분양가격 동향_20210531.csv", header = T)
head(df2)
dim(df1)
str(df1)
summary(df1)
dim(df1)
table(is.na(df1))
df1.melt <- melt(df1, id = c('지역'), value.name = 'price')
head(df1.melt)
class(df1.melt$variable)
is.character(df1.melt$variable)
df1.melt$variable <- as.character(df1.melt$variable)
class(df1.melt$variable)
substr(variable, 2, 5)
# variable에서 년도 뽑기
variable = 'X2013년12월'
substr(variable, 2, 5)
df1.melt$연도 <- as.integer(substr(df1.melt$variable, 2, 5))
# variable에서 월 뽑기
strsplit(variable, '년')
# variable에서 월 뽑기
monthStr <- strsplit(variable, '년')[[1]][2]
monthStr <- substr(monthStr, 1, nchar(monthStr)-1)
as.integer(monthStr)
getMonth <- function(variable){
monthStr <- strsplit(variable, '년')[[1]][2]
monthStr <- substr(monthStr, 1, nchar(monthStr)-1)
return(as.integer(monthStr))
}
getMonth('X2013년12월')
sapply(df1.melt$variable, getMonth)
df1.melt$월 <- sapply(df1.melt$variable, getMonth)
head(df1.melt$월)
df1.melt$variable <- NULL
head(df1.melt)
dim(df2)
midwest %>% select('county', 'state', 'totalasian') %>% arrange(desc(midwest$totalasian)) %>% tail(10)
head(df2)
df2 <- df2[규모구분 == '모든면적', ]
df2 <- df2[df2$규모구분 == '모든면적', ]
df2
df2$규모구분 <- NULL
df2
df2$분양가격... <- as.integer(df2$분양가격...)
head(df2)
colnames(df2) <- c('지역', '연도', '월', 'price_per_m')
head(df2)
df2[df2$price_per_m == '', ]
sum(is.na(df2))
colSums(is.na(df2))
df2$price_per_m <- as.integer(df2$price_per_m)
sum(is.na(df2))
df2$price <- df2$price_per_m * 3.3
head(df1.melt, 2)
head(df2[, c('지역', '연도', '월', 'price')], 2)
df <- rbind(df1.melt, df2[, c('지역', '연도', '월', 'price')])
edit(df)
dim(df)
### 3. 데이터 테이블 ###
# 짧고 유연한 빠른 구문을 사용하기 위해 데이터프레임에서 상속받음
flightDF <- read.csv("inData/flights14.csv", header = T)
head(flightDF)
dim(flightDF)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library(data.table)
install.packages("data.table")
? data.table
?? data.table
# 16. origin, dest별로 비행횟수 출력
table(flightDF$origin, flightDF$dest)
subset(flightDF, colnames(c('delay_arr', 'delay_dep')), select = c('arr_delay', 'dep_delay'))
? subset
subset(flightDF, subset = colnames(c('delay_arr', 'delay_dep')), select = c('arr_delay', 'dep_delay'))
subset(flightDF, subset = rename(c('delay_arr', 'delay_dep')), select = c('arr_delay', 'dep_delay'))
subset(flightDF, subset = rename(flightDF, "delay_arr" = "arr_delay",
"delay_dep" = "dep_delay"), select = c('arr_delay', 'dep_delay'))
flightDF[, c('arr_delay','dep_delay')]
names(flightDF$arr_delay, flightDF$dep_delay) = c('delay_arr', 'delay_dep')
names(flightDF)[names(flightDF) == "arr_delay"] = "delay_arr"
names(flightDF)[names(flightDF) == "dept_delay"] = "delay_dep"
subset(flightDF, select = c('delay_arr', 'delay_dep'))
names(flightDF)[names(flightDF) == "delay_arr"] = "arr_delay"
names(flightDF)[names(flightDF) == "delay_dep"] = "dep_delay"
? nrow
x <- subset(flightDF, subset = (origin == 'JFK'), select = (month == 6))
nrow(x)
subset(x, select = c('arr_delay', 'dep_delay'))
subset(x, select = 'arr_delay')
subset(flightDF, subset = (flightDF$origin == 'JFK' & flightDF$month == 6), select = c('arr_delay', 'dep_delay'))
subset(flightDF, subset = (flightDF$origin == 'JFK' & flightDF$month == 6), select = -c('arr_delay', 'dep_delay'))
table(flightDF$origin)
B <- subset(flightDF, subset = (carrier == 'AA'), select = 'origin')
nrow(B)
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flightDF %>% filter(carrier == 'AA') %>% group_by(origin) %>% select(flight) %>% summarise(n = n())
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flightDF %>% filter(carrier == 'AA') %>% group_by(origin) %>% select(flight) %>% summarise(n = n())
## 연습예제 ##
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
library(dplyr)
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flightDF %>% filter(carrier == 'AA') %>% group_by(origin) %>% select(flight) %>% summarise(n = n())
B <- subset(flightDF, subset = (carrier == 'AA'), select = flightDF[, origin])
table(B)
table(subset(flightDF, subset = (carrier == 'AA'), select = 'origin'))
# 17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flightDF, subset = (carrier == 'AA'), select = c('origin', 'dest'))
# 17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flightDF, subset = (carrier == 'AA'), select = c('origin', 'dest')))
# 17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flightDF, subset = (carrier == 'AA'), select = c['origin', 'dest']))
# 17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
table(subset(flightDF, subset = (carrier == 'AA'), select = 'dest'))
library(data.table)
flight <- fread('inData/flights14.csv')
class(flight)
flight <- flight[origin == 'JFK' & month == 5]
head(flight)
resul <- flight[1:2]
resul
# 3. origin으로 오름차순, dest로 내림차순으로 정렬하여 출력
flightDF.order <- flightDF[order(flightDF$origin, desc(flightDF$dest)), ]
flightDF.order
# 3. origin으로 오름차순, dest로 내림차순으로 정렬하여 출력
library(dplyr)
flight[order(flight$origin, -flight$dest)]
flight[order(origin, -dest)]
flightDF.order <- flightDF[order(flightDF$origin, desc(flightDF$dest)), ]
flightDF.order
flight[, year:dep_time]
subset(flight, select = c('year' : 'dep_time'))
subset(flight, select = c(year : dep_time))
flight[, .(year, dep_time)]
flight[, .(연도 = year, 출발시간 = dep_time)]
flight[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
flight[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
flightDF[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
flight[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
nrow(flightDF[flightDF$arr_delay < 0 & flightDF$dep_delay <0, ])
# 8. 지연시간(arr_delay, dep_delay)이 모두 0미만인 비행이 몇 번인지 출력
flightDF %>% filter(arr_delay <0 & dep_delay <0) %>% select(flight) %>% summarise(n = n())
flight[arr_delay < 0 & dep_delay < 0]
flight[arr_delay < 0 & dep_delay < 0, .(cnt = .N)] # .N : 갯수
library(data.table)
flight <- fread('inData/flights14.csv') # csv파일을 데이터테이블로 받는 함수
flight[arr_delay < 0 & dep_delay < 0, .(cnt = .N)] # .N : 갯수
flight[(arr_delay + dep_delay) < 0, .(cnt = .N)]
#   8-1 지연시간의 합이 0미만인 비행이 몇 번인지 출력
flightDF %>% filter((arr_delay + dep_delay) < 0) %>% select(flight) %>% summarise(n = n())
### 3. 데이터 테이블 ###
# 짧고 유연한 빠른 구문을 사용하기 위해 데이터프레임에서 상속받음
flightDF <- read.csv("inData/flights14.csv", header = T)
#   8-1 지연시간의 합이 0미만인 비행이 몇 번인지 출력
flightDF %>% filter((arr_delay + dep_delay) < 0) %>% select(flight) %>% summarise(n = n())
nrow(flightDF[(flight$arr_delay + flightDF$dep_delay) < 0, ])
flight[(arr_delay + dep_delay) < 0, .(.N)]
flight[(arr_delay + dep_delay) < 0, .(.A)]
flight[(arr_delay + dep_delay) < 0, .(.N)]
apply(flightDF[flightDF$origin == 'JFK' & flightDF$month == 6], c('arr_delay', 'dep_delay'), 2, mean)
apply(flightDF[flightDF$origin == 'JFK' & flightDF$month == 6, c('arr_delay', 'dep_delay')], 2, mean)
flight[origin == 'JFK' & month == 6, .(mean_arr = mean(arr_delay),
mean_dep = mean(dep_delay))]
x <- apply(subset(flightDF, origin == 'JFK' & month == 6, select = c('arr_delay', 'dep_delay')), 2, mean)
names(x) <- c('mean_arr', 'mean_dep')
x
names(x) <- c('mean_arr', 'mean_dep') x
flight[origin == 'JFK' & month == 6, .(mean(arr_delay), mean(dep_delay))]
flight[origin == 'JFK' & month == 6, .(mean_arr = mean(arr_delay),
mean_dep = mean(dep_delay))]
# 11. JFK 공항의 6월 운항 횟수
nrow(subset(flightDF, origin == 'JFK' & month == 6))
flight[origin == 'JFK' & month == 6, .(.N)]
flight[origin == 'JFK' & month == 6, .(arr_delay, dep_delay)]
colnames(flightDF)
flight[origin == 'JFK' & month == 6, -c("arr_delay", "dep_delay")]
flight[, .N, by = .(origin)]
flight[, .N, by = .(origin)]
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
table(flightDF$origin)
flight[carrier == 'AA', .N, by = .(origin)]
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
table(subset(flightDF, subset = (carrier == 'AA'), select = 'origin'))
flight[, .(.N), by = .(origin, dest)]
flight[carrier == 'AA', .(.N), by = .(origin, dest)]
temp <- flightDF[flightDF$carrier == 'AA', ]
flight[carrier == 'AA', .(mean(arr_delay), mean(dep_delay)), by = .(origin, dest, month)]
aggregate(tmep[, c('arr_delay', 'dep_delay')],
by = list(temp$origin, temp$dest, temp$month),
FUN = mean)
aggregate(temp[, c('arr_delay', 'dep_delay')],
by = list(temp$origin, temp$dest, temp$month),
FUN = mean)
flight[, .(.N), by = .(dep_delay > 0, arr_delay > 0)]
temp <- subset(flightDF, origin == 'JFK')
tapply(temp$dep_delay, temp$month, max)
aggregate(temp$dep_delay, by = list(temp$month), max)
result <- aggregate(temp$dep_delay, by = list(temp$month), max)
result[order(result$month), ]
result <- aggregate(temp$dep_delay, by = list(temp$month), max)
result
result[order(result$Group.1), ]
library(doBy)
result <- summaryBy(dep_delay ~ month, data = temp, FUN = max)
result[order(result$month)]
result[order(result$month), ]
flight[origin == 'JFK', .(max = max(dep_delay)), by = .(month)]
# ex.
plot(mtcars$wt, mtcars$mpg)
boxplot(mtcars$mpg)
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit <- lm(mpg ~ wt, data = mtcars)
fit
#     저수준 그래프
abline(fit, col = 'red')
# ex. 고수준 그래프 - 그래픽 창을 새롭게 열어 그래프를 그릴 수 있게 해주는 함수
plot(mtcars$wt, mtcars$mpg)
#     저수준 그래프 - 열려있는 그래픽 창에 점, 화살표, 선과 같이 부수적인 요소를 추가
abline(fit, col = 'red')
library(ggplot2)
ggplot(data = mtcars, aes(x = wt, y = mpg))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'blue')
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'yellow')
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'orange')
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'orange', pch = 2)
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'orange', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'skyblue', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(col = 'violet', pch = 2) +
labs(title = "첫 산점도 예제")
ggplot(data = mtcars, aes(x = wt, y = mpg)) + # 그래프 초기화
geom_point(col = 'violet', pch = 2) + # mpg, wt에 대해 데이터 표기
labs(title = "첫 산점도 예제") + # 제목
geom_smooth()
ggplot(data = mtcars, aes(x = wt, y = mpg)) + # 그래프 초기화
geom_point(col = 'violet', pch = 2) + # mpg, wt에 대해 데이터 표기
labs(title = "첫 산점도 예제") + # 제목
geom_smooth(method = "lm")
ggplot(data = iris, aes(x = Species, y = Sepal.Length))
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot()
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot(fill = 'red')
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par()
? par
plot(cars)
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par() - 그래프 환경을 조정
? par
oldPar <- par(bty = 'c')
oldPar
oldPar <- par(bty = ']')
plot(cars)
plot(iris)
par(oldPar)
plot(cars)
plot(iris)
oldPar <- par(bty = 'L') # 파라미터 지정 전 객체를 저장
plot(cars)
plot(cars)
oldPar <- par(bty = 'L') # 파라미터 지정 전 객체를 저장
plot(cars)
plot(iris)
par(oldPar) # oldPar 설정으로 복귀된다.
plot(cars, xlab = "x label", ylab = "y label", main = "제목")
fit <- lm(dis ~ speed, data = cars)
fit <- lm(dist ~ speed, data = cars)
ablines(fit, col = 'red', lwd = 4)
## 1.3 그래프 파라미터
# 그래프를 그리는 함수에는 다양한 파라미터가 존재하고, par()함수를 통해 변경한다.
# (1) par() - 그래프 환경을 조정
library(ggplot2)
ablines(fit, col = 'red', lwd = 4)
abline(fit, col = 'red', lwd = 4)
abline(fit, col = 'red', lwd = 2)
fit <- lm(dist ~ speed, data = cars)
abline(fit, col = 'red', lwd = 2)
plot(cars, xlab = "x label", ylab = "y label", main = "제목") # 그래프 축 이름 및 제목 변경
fit <- lm(dist ~ speed, data = cars)
abline(fit, col = 'red', lwd = 2, lty = 'dashed')
colors()
# (1-1) par()함수의 다른 파라미터 사용 예
x <- 1:100
y1 <- rnorm(100) # 평균이 0이고 표준편차가 1인 수 100개 추출
y2 <- rnorm(100) + 100 # 평균이 100이고 표준편차가 1인 수 100개 추출
oldPar <- par(mar = c(5, 5, 5, 5)) # mar : 그래프 여백(하, 좌, 상, 우)
? plot
? points
plot(x, y1, pch = 10, type = "b") # pch : 찍히는 점의 스타일, type :
plot(x, y1, pch = 10, type = "b", bg = 'red') # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red') # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2)) # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", bty = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", btx = "n") # pch : 찍히는 점의 스타일
plot(x, y1, pch = 21, type = "b", bg = 'red', ylim = c(-8, 2),
yaxt = "n", bty = "n", ylab = "") # pch : 찍히는 점의 스타일
# bg : 21~25번의 pch에만 해당
# ylim : y축의 범위 설정
# yaxt : y축의 수치 표시를 없앰.
axis(side = 2, at = (c(-2, 0, 2))) # side : 1하, 2좌, 3상, 4우
# bg : 21~25번의 pch에만 해당
# ylim : y축의 범위 설정
# yaxt : y축의 수치 표시를 없앰.
axis(side = 2, at = c(-2, 0, 2), col = 'red') # side : 1하, 2좌, 3상, 4우
# 저수준 그래프, at축이 그려질 위치
mtext("red line(y1)", side = 2, line = 2, at = 0, col = 2)
par(new = TRUE) # 기존 그래프를 지우지 않고 덧그림
plot(x, y2, pch = 20, type = "b", col = 'blue', yaxt = "n",
ylim = c(98, 108), ylab = "", bty = "n")
axis(side = 2, at = c(-8:-4), col = 'blue')
axis(side = 4, at = c(98, 100, 102), col = 'blue')
mtext("blue line(y2)", side = 4, line = 2, at = 100, col = 'blue')
par(oldPar)
## 2. 그래프 함수(고수준)
# 2.1 plot - type에 따라 여러 유형의 그래프를 그린다. default는 산점도 유형
# 3행 2열로 그래프영역을 분리하고 type 속성에 따른 그래프 출력
? par
oldPar <- par(mfrow = c(3,2))
plot(cars, type = "p", main = "p type")
plot(cars, type = "l", main = "l type")
plot(cars, type = "b", main = "b type")
plot(cars, type = "o", main = "o type") # 선과 점
plot(cars, type = "s", main = "s type") # 계단 형태
plot(cars, type = "n", main = "n type") # 안보임
par(oldPar)
plot(cars)
plot(cars, main = "speed and stopping distance of cars")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylabel = "stopping distance(ft)")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylab = "stopping distance(ft)")
plot(cars, main = "speed and stopping distance of cars", xlab = "speed(mph)",
ylab = "stopping distance(ft)", las = 1)
